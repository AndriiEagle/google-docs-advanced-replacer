/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ü§ñ Smart Fragment Fixer ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

/**
 * –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–ª–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –≤–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ö.
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏–º–≤–æ–ª–∞–º–∏, –ø—Ä–æ–±–µ–ª–∞–º–∏, –∫–∞–≤—ã—á–∫–∞–º–∏.
 * @param {Array<Object>} directives –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–∏–≤—ã.
 * @param {Array<Object>} allElements –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞.
 * @param {boolean} hasApiKey –ù–∞–ª–∏—á–∏–µ OpenAI API –∫–ª—é—á–∞.
 * @returns {Array<Object>} –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–∏–≤—ã.
 */
function applySmartFragmentFixer(directives, allElements, hasApiKey) {
  logOperation('INFO', 'ü§ñ Smart Fragment Fixer: –Ω–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –¥–∏—Ä–µ–∫—Ç–∏–≤');
  
  return directives.map((directive, index) => {
    const originalFragment = directive.fragment;
    if (!originalFragment) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏—Ä–µ–∫—Ç–∏–≤—ã –±–µ–∑ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
      return { ...directive, wasFixed: false, fixType: [] };
    }
    
    let currentFragment = originalFragment;
    const fixType = [];
    
    // STEP 1: Check if basic normalization is enough
    const hasNormalizedMatch = allElements.some(elem => 
      normalizeText(elem.text).includes(normalizeText(originalFragment))
    );
    
    if (hasNormalizedMatch) {
      // Normalization was sufficient, no manual fixes needed
      return { ...directive, fragment: originalFragment, wasFixed: false, fixType: [] };
    }
    
    // STEP 2: Apply manual fixes only if normalization failed
    logOperation('WARN', `‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–∏–≤–∞ #${index + 1}: –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –ø–æ–º–æ–≥–ª–∞, –ø—Ä–∏–º–µ–Ω—è—é —Ä—É—á–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è`);

    // –≠—Ç–∞–ø—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const fixes = [
      (frag) => frag.replace(/\s-\s/g, ' ‚Äî ').replace(/^-\s/g, '‚Äî ').replace(/\s-$/g, ' ‚Äî'), // –¢–∏—Ä–µ
      (frag) => frag.replace(/\"(.*?)\"/g, '¬´$1¬ª'), // –ö–∞–≤—ã—á–∫–∏
      (frag) => frag.replace(/\s+/g, ' ').trim(), // –ü—Ä–æ–±–µ–ª—ã
      (frag) => frag.replace(/[\u2019'`]/g, ' º') // –ê–ø–æ—Å—Ç—Ä–æ—Ñ—ã (legacy)
    ];

    const fixNames = ['—Ç–∏—Ä–µ', '–∫–∞–≤—ã—á–∫–∏', '–ø—Ä–æ–±–µ–ª—ã', '–∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã'];

    fixes.forEach((fix, i) => {
      const fixed = fix(currentFragment);
      if (fixed !== currentFragment) {
        fixType.push(fixNames[i]);
        currentFragment = fixed;
      }
    });

    const wasFixed = fixType.length > 0;
    if (wasFixed) {
       logOperation('INFO', `üîß –î–∏—Ä–µ–∫—Ç–∏–≤–∞ #${index + 1}: –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (${fixType.join(', ')}). "${originalFragment}" -> "${currentFragment}"`);
    }
    
    return { ...directive, fragment: currentFragment, originalFragment, wasFixed, fixType };
  });
}
